In this part, we will do stochastic simulation of SIR model by  Gillespie algorithm. More introduction on Gillespie algorithm can be seen in [Gillespie algorithm - Wikipedia](https://en.wikipedia.org/wiki/Gillespie_algorithm). Considering the following SIR model with birth and death
$$\left\{
\begin{aligned}
& \frac{\rm{d}S}{\rm{dt}} = \Lambda -\beta S I - d S,\\
&\frac{\rm{d}I}{\rm{dt}} = \beta S I- \gamma I -d I,\\
&\frac{\rm{d}R}{\rm{dt}} = \gamma I - d R\\
\end{aligned}
$$
## Loading Libraries

```julia
using DifferentialEquations
using Plots
using Catalyst
using Catalyst: Graph
using Latexify
```

## Define the model

```julia
SIR = @reaction_network begin
    β, S + I --> 2I # infection
    γ, I --> R # recover
    Λ, ∅ --> S # birth
    d, S --> ∅ # death of S
    d, I --> ∅ # death of I
    d, R --> ∅ # death of R
end β γ Λ d
```
Show the graph diagram of SIR model.

```julia
Graph(SIR)
```

Latexify the SIR model

```julia
latexify(SIR, starred=true)
```
## Solve the model by determinstic method

```julia
tmax = 20.0
dt = 0.1
tspan = (0.0,tmax)
u0 = [1000,1,0.0]
p = [0.002,0.1,100,0.1]
prob_ode = ODEProblem(SIR,u0,tspan,p)
sol = solve(prob_ode,Tsit5(),saveat=dt)
plot(sol, label = ["S" "I" "R"], title = "Determinstic Simulation of SIR Model")
```
## Solve the model by Gillespie algorithm

```julia
tmax = 20.0
tspan = (0.0,tmax)
u0 = [1000,1,0.0]
p = [0.002,0.1,100,0.1]
prob_ode = DiscreteProblem(SIR,u0,tspan,p)
prob_jump = JumpProblem(SIR, prob_ode, Direct())
sol = solve(prob_jump,SSAStepper())
plot(sol, label = ["S" "I" "R"], title = "Stochastic Simulation of SIR Model by Gillespie Method")
```

